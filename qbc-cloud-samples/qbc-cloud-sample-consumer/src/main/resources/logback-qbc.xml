<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 根节点<configuration>包含的属性 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds"
	debug="false">
	<!-- <contextName> 设置上下文名称 -->
	<!-- 每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。 -->
	<!-- 一旦设置，不能修改,可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性，可有可无。 -->
	<contextName>${APP_NAME}</contextName>

	<!-- <property> 设置变量 -->
	<!-- 用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。 -->
	<!-- 通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<!-- 这里可以看后通过 application.yml 传递参数过来。 -->
	<springProperty scope="context" name="appName"
		source="spring.application.name" />
	<springProperty scope="context" name="logPath"
		source="logging.path" />
	<property name="APP_NAME" value="${appName}" />
	<property name="TACTICS_NAME" value="${appName}-tactics" />
	<property name="LOG_HOME" value="${logPath}" />
	<property name="LOG_KEEP_TIME" value="15" />
	<property name="LOG_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{userId}] [%X{username}] [%-5level] [%logger{36}:%line] - [%msg]%n" />

	<!-- appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<appender name="DEBUG_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_HOME}/${APP_NAME}/${APP_NAME}.debug.%d{yyyy-MM-dd}.log</FileNamePattern>
			<MaxHistory>${LOG_KEEP_TIME}</MaxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="INFO_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_HOME}/${APP_NAME}/${APP_NAME}.info.%d{yyyy-MM-dd}.log</FileNamePattern>
			<MaxHistory>${LOG_KEEP_TIME}</MaxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="WARN_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_HOME}/${APP_NAME}/${APP_NAME}.warn.%d{yyyy-MM-dd}.log</FileNamePattern>
			<MaxHistory>${LOG_KEEP_TIME}</MaxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="ERROR_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_HOME}/${APP_NAME}/${APP_NAME}.error.%d{yyyy-MM-dd}.log</FileNamePattern>
			<MaxHistory>${LOG_KEEP_TIME}</MaxHistory>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。 -->
	<!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。 -->
	<!-- 默认是DEBUG。 可以包含零个或多个元素，标识这个appender将会添加到这个loger。 -->
	<root level="INFO">
		<appender-ref ref="INFO_FILE" />
		<appender-ref ref="WARN_FILE" />
		<appender-ref ref="ERROR_FILE" />
	</root>

	<!-- <loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 -->
	<!-- <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。 -->
	<!-- name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
	<!-- level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， -->
	<!--还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 -->
	<!-- addtivity:是否向上级loger传递打印信息。默认是true。 -->
	<springProfile name="dev">
		<logger name="com.qbc" addtivity="true" level="DEBUG">
			<appender-ref ref="STDOUT" />
			<appender-ref ref="DEBUG_FILE" />
		</logger>
	</springProfile>
</configuration>